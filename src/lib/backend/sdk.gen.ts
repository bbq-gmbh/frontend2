// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { ChangePasswordData, ChangePasswordErrors, ChangePasswordResponses, CreateEmployeeData, CreateEmployeeErrors, CreateEmployeeResponses, CreateUserData, CreateUserErrors, CreateUserResponses, GetCurrentEmployeeData, GetCurrentEmployeeResponses, GetEmployeesData, GetEmployeesErrors, GetEmployeesResponses, GetSetupStatusData, GetSetupStatusResponses, ListUsersData, ListUsersResponses, LoginUserData, LoginUserErrors, LoginUserResponses, LogoutAllSessionsData, LogoutAllSessionsResponses, MeData, MeResponses, ReadRootGetData, ReadRootGetResponses, RefreshTokensData, RefreshTokensResponses, RegisterUserData, RegisterUserErrors, RegisterUserResponses, SetupCreateData, SetupCreateErrors, SetupCreateResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Me
 */
export const me = <ThrowOnError extends boolean = false>(options?: Options<MeData, ThrowOnError>) => {
    return (options?.client ?? client).get<MeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/me/',
        ...options
    });
};

/**
 * List Users
 *
 * Get a list of all users. Requires authentication.
 */
export const listUsers = <ThrowOnError extends boolean = false>(options?: Options<ListUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListUsersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/',
        ...options
    });
};

/**
 * Create User
 *
 * Create a new user.
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateUserResponses, CreateUserErrors, ThrowOnError>({
        url: '/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Register User
 */
export const registerUser = <ThrowOnError extends boolean = false>(options: Options<RegisterUserData, ThrowOnError>) => {
    return (options.client ?? client).post<RegisterUserResponses, RegisterUserErrors, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Login User
 */
export const loginUser = <ThrowOnError extends boolean = false>(options: Options<LoginUserData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginUserResponses, LoginUserErrors, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout All Sessions
 *
 * Logs out from all devices by rotating the token key (invalidates all tokens).
 */
export const logoutAllSessions = <ThrowOnError extends boolean = false>(options?: Options<LogoutAllSessionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<LogoutAllSessionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/logout-all',
        ...options
    });
};

/**
 * Refresh Tokens
 *
 * Refreshes both access and refresh tokens using a valid refresh token.
 */
export const refreshTokens = <ThrowOnError extends boolean = false>(options?: Options<RefreshTokensData, ThrowOnError>) => {
    return (options?.client ?? client).post<RefreshTokensResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/refresh',
        ...options
    });
};

/**
 * Change Password
 *
 * Changes the current user's password and invalidates existing tokens.
 */
export const changePassword = <ThrowOnError extends boolean = false>(options: Options<ChangePasswordData, ThrowOnError>) => {
    return (options.client ?? client).post<ChangePasswordResponses, ChangePasswordErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Current Employee
 *
 * Get the employee for the current user.
 */
export const getCurrentEmployee = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentEmployeeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCurrentEmployeeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/employees/me',
        ...options
    });
};

/**
 * Get Employees
 *
 * Get employee for a specific user.
 */
export const getEmployees = <ThrowOnError extends boolean = false>(options: Options<GetEmployeesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetEmployeesResponses, GetEmployeesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/employees/{user_id}',
        ...options
    });
};

/**
 * Create Employee
 *
 * Create a new employee.
 */
export const createEmployee = <ThrowOnError extends boolean = false>(options: Options<CreateEmployeeData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateEmployeeResponses, CreateEmployeeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/employees/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Setup Status
 */
export const getSetupStatus = <ThrowOnError extends boolean = false>(options?: Options<GetSetupStatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSetupStatusResponses, unknown, ThrowOnError>({
        url: '/__setup/',
        ...options
    });
};

/**
 * Setup Create
 */
export const setupCreate = <ThrowOnError extends boolean = false>(options: Options<SetupCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<SetupCreateResponses, SetupCreateErrors, ThrowOnError>({
        url: '/__setup/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Root
 */
export const readRootGet = <ThrowOnError extends boolean = false>(options?: Options<ReadRootGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadRootGetResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};
